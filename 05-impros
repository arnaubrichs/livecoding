--TIDAL IMPROVISATIONS--

--improvisation #1 13/05/21

let plyPat = "<2 4 6 4 1 5 7 2 5 1>"

let mainPat = "{3 5 1 9!2 4 1*2 <6 7> 10 11}%34"

let patC lo hi rate = (range lo hi $ slow rate isaw)

let patbpf = (range 30 2000 $ slow 2 sine * (slow 3 $ isaw))

let patSin lo hi rate = (range lo hi $ slow rate sine) * (slow 80 rand)



d1 $ whenmod 18 21 (degradeBy 0.999)
$ whenmod 3 27 ((rev) . (degradeBy 0.2))
$ sometimesBy 10 (|* (irand 300))
$ somecyclesBy 0.3 (plyWith 5 ((# speed 2) . (# gain "<1.1? 0.9 0.8>")))
$ every 13 ((slow "<3 5 6 1>") . (|+ up "<3 -1 3? -2 3 -5? 2? -3>"))
$ s "stems3"
    # n (rev (mainPat))
    # gain (patC 0.5 1 10)
    # cut "<3 4 7 1>"
    # room (rev (patC 0.2 0.9 10))
    # size (rev (patSin 0.1 0.8 20))
    # size (patSin 0.1 0.8 20)
    # bpf (range 30 2000 $ slow 2 sine * (slow 3 $ saw))
    # bpf (range 2000 30 $ slow 4 sine * (slow 6 $ saw))
    # bpq (rev (plyPat)/2)

d2 $ whenmod 16 18 (degradeBy 0.999)
$ somecyclesBy "<5? 45? 6?>" (rev) $ whenmod 3 10 ((# speed 2) . (jux rev))
$ every 13 ((slow "3? 5?+3 6?+3") . (# up "{3?+1 -1 2?+2 -2}"))
$ every 5 (plyWith 2 ((|+ up "<4 5? 6?+3 -1?+4>") . (|* gain "<0.9 1.1 1.2>")))
    $ s "<stems1? stems0?>"
    # n (mainPat)
    # gain (patC 0.2 1 5)
    # cut 1 # legato 1
    # room (patC 0.2 0.9 10)
    # size (rev (patSin 0.1 0.8 20))
    # size (patSin 0.1 0.9 20)
    # pan (rev ((patC 1 3 10)))
    # bpf (range 5000 30 $ slow 2 sine * (slow 3 $ isaw))
    # bpq (rev (plyPat))

d3 $ whenmod 3 15 (degradeBy 0.999)
$ every 3 ((jux rev) . (|+ up "<1 4 3>"))
$ sometimesBy 5 (|* (irand 300))
$ whenmod 3 10 ((rev) . (# up "{2?-5 -2?+4 <3 -7?+1 2?> -5}"))
$ s "{stems_1? stems6? stems11? stems12?}/24"
    # n (mainPat) * (slow 3 $ mainPat) * (segment 1 $ slow 30 rand)
    # gain (patC 1 0.5 24)
    # cut 1 # legato 2
    # room (patSin 0.2 0.9 10)
    # size (rev (patC 0.1 0.8 20))
    # bpf (range 15000 30 $ slow 2 sine * (slow 3 $ isaw))
    # bpf (range 30 13000 $ slow 4 sine * (slow 3 $ isaw))
    # bpq (plyPat)/4
    # pan (rev ((patSin 0.2 2 10)))

d4 $ whenmod 15 17 (degradeBy 0.999)
$ sometimesBy 12 ((rev) . (slow 4) . (striateBy "<3?-1 5?-3 6?-3 7>/24" "<4 0.25 0.5 1?+2 0.6?>"))
$ plyWith (plyPat) (|+ up 4)
    # s "<stems12*2?0.3 stems32>/4?0.3"
    # n (irand 300)
    # cut 1 # legato 1
    # room (patC 0.2 0.9 10)
    # size (patSin 0.1 0.8 20)
    # bpf (range 15000 30 $ slow 2 sine * (slow 3 $ isaw))
    # bpf (range 18000 30 $ segment 2 $ slow 2 sine * (slow 6 $ isaw))
    # pan (rev ((patC 0 2 10)))

--improvisation 16/05/21. (variation on the first one)

let plyPat = "<1 5 6 2 6 5 7 2 9 1>"

let mainPat = "{3 5 1 9!2 4?+3 1*2?+2 <6 7> 10 11}%34"

let patC lo hi rate = (range lo hi $ slow rate isaw)

let patbpf = (range 30 2000 $ slow 2 sine * (slow 3 $ isaw))

let patSin lo hi rate = (range lo hi $ slow rate sine) * (slow 80 rand)

let pat = "{t ~? t t f? ~? t <t f t> ~? t t? f f? t? t f ~? ~ f? ~? t t t f }"


d1 $ whenmod 18 21 (degradeBy 0.999)
$ sometimesBy 23 (jux rev)
$ every 10 (struct (rev pat))
$ rarely ((|* speed 1.5) . (striateBy (plyPat) "<1 0.5 2? 3? 1>") . (|* gain "0.6 <0.4 0.1?>"))
$ sometimesBy 10 (|+ (irand 300))
$ sometimesBy 10 (|+ room (range 0.1 0.2 $ slow 15 rand))
$ sometimesBy 15 (|+ bpf (range 5 50 $ segment 1 $ slow 15 rand))
$ somecyclesBy 0.3 (plyWith 5 ((# speed 2) . (# gain "<1.1? 0.9 0.8>")))
$ every 13 ((slow "<3 2 6? 1?>") . (|+ up "<3 -1 3? -2 3 -5? 2? -3>"))
$ s "stems3"
    # n (rev (mainPat)) + (range 1 20 $ segment 1 $ slow 20 rand)
    # gain (patC 0.5 1 10)
    # cut 1 # legato 1
    # room (rev (patC 0.2 0.7 10))
    # size (rev (patSin 0.1 0.9 20))
    # bpf (range 30 15000 $ slow 2 sine * (slow 3 $ saw))
    # bpf (range 15000 30 $ slow 4 sine * (slow 6 $ saw))
    # bpq (rev (plyPat)/4)


d2 $ whenmod 15 18 (degradeBy 0.999)
$ sometimesBy 27 (jux rev)
$ every 10 (struct (pat))
$ somecyclesBy "<5? 45? 6?>" (rev) $ whenmod 3 10 ((# speed 2) . (jux rev))
$ sometimesBy 10 (|+ room (range 0.1 0.2 $ slow 15 rand))
$ every 13 ((slow "3? 5?+3 6?+3") . (# up "{3?+1 -1 2?+2 -2}"))
$ every 5 (plyWith 2 ((|+ up "<4 5? 6?+3 -1?+4>") . (|* gain "<0.9 1.1 1.2>")))
    $ s "<stems1? stems0 stems32?>"
    # n (mainPat)
    # gain (patC 0.2 1 5)
    # cut 2 # legato 2
    # room (patC 0.2 0.9 10)
    # size (rev (patSin 0.1 0.8 20))
    # pan (rev ((patC 1 3 10)))
    # bpf (range 5000 30 $ slow 2 sine * (slow 3 $ isaw))
    # bpq (rev (plyPat)/8)


d3 $ whenmod 12 17 (degradeBy 0.999)
$ sometimesBy 12 ((rev) . (striateBy "<3?-1 6?-3 7>/24" "<4 0.25 0.5 1?+2 0.6?>"))
$ sometimesBy 15 (plyWith 3 (|* up "<3 5 2 6 1?>"))
$ s "<stems12? stems1>/4?"
    # n (mainPat)
    # cut 1 # legato 1
    # room (patC 0.2 0.9 10)
    # size (patSin 0.1 0.8 20)
    # bpf (range 15000 30 $ slow 2 sine * (slow 3 $ isaw))
    # bpf (range 18000 30 $ segment 2 $ slow 2 sine * (slow 6 $ isaw))
    # pan (patC 0 2 20)

d4 $ whenmod 3 211 (degradeBy 0.999)
$ sometimesBy 13 (rev)
$ every 5 (struct (pat))
$ slow "<10 4 1 3 0.9>" $ s "readorb:0 stems12?"
# n (mainPat)
# cut 2 # legato 2
# room (patC 0.2 0.9 10)
# delaytime (mainPat)/30
# delayfb 0.4
# pan (rev ((patC 0 2 10)))

---------


--saturation MIDI automation, routed to reaper

let model p = (ccn 1) $ p
    drive p = (ccn 2) $ p
    tone p = (ccn 3) $ p
    bass p = (ccn 4) $ p
    mid p = (ccn 5) $ p
    high p = (ccn 6) $ p

d1 $ stack [ freqMod # ccv (range 1 90 $ slow 29 tri)
            , ffilter # ccv (range 2 3 $ slow 2 )
            , fenv # ccv "3 4 6 7"
            ] # s "midi" # midichan 0
